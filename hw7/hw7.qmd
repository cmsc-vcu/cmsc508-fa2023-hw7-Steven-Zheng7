---
title: Homework 7 - Creating a resume database
author: Steven Zheng
date: 11-11-2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document will contain some python code that is used to retrieve data from a database by using sql. The python code will probably not be visible. Therefore, the user will only see whatever the output is from the sql commands. 

GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-Steven-Zheng7

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This database should represent a company wide resume where each skill and resume will be related to one or more employee. Each employee entity will have an ID, name, email, linkedInURL, photo, discord handle, bio, and the date that they joined. Each skill entity will have an ID, name, description, and a URL pointing to where customer can learn more about the skill. The database will associate skill and certification with employees as well as include desire skills that the company wish to have that none of the employee obtained yet. 

## Crows-foot diagram

Here we have the crow foot notation for the database that was created. This database 
contains 3 major entities: people, skills, and roles. People can have one or more roles and people can have zero or more skills. Then we have two linking table called peopleskills and peopleroles where they are used to link up other tables when performing sql queries. 
```{mermaid}
%%| echo: false
erDiagram
    people ||--o{ skills : has
    people ||--|{ roles : have
    skills {
        int skill_id PK
        string skill_name
        string skill_description
        sting skill_tag
        string skill_url
        date skill_time_commitment
    }
    people {
        int people_id PK
        string people_first_name
        string people_last_name
        string people_email
        string people_url
        string people_headshot
        string people_discord
        string people_bio
        string people_date_joined
    }
    peopleskills {
        int peopleskills_id PK
        int skills_id FK
        int people_id FK
        date date_acquired
    }
    roles {
        int role_id PK
        string role_name
        int sort_priority
    }
    peopleroles {
        int people_role_id PK
        int people_id FK
        int role_id FK
        date date_assigned
    }
```

## Examples of data in the database

For the people table, it will contain field id, first name, last name, email, linkedin url, a headshot photo url, discord handle, a bio description and the date joined. The skill table will include a skill ID, the skill name, a description of the skill, a skill tag, a url to a website about the skill, and the time it took to learn such skills. The role table will be used to store roles that is given to people and have fields scuh as role ID, role name, and a sorting priority base on a given constraint. Here is the listing of the entire table. 

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

```{python}
#| echo: false
#| eval: true
sql = f"""
select 
    skill_name, skill_tag, skill_description 
from 
    skills
order by skill_name;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select
    people_first_name, people_last_name, people_email
from 
    people
order by
    people_last_name;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select 
    skill_name
from 
    peopleskills a
    inner join people b on (a.people_id=b.people_id)
    inner join skills c on (c.skill_id=a.skill_id)
where 
    a.people_id = 1
    ;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select 
    people_first_name,
    people_last_name
from 
    peopleskills a
    inner join people b on (a.people_id=b.people_id)
    inner join skills c on (c.skill_id=a.skill_id)
where 
    a.skill_id = 6
    ;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select 
    people_first_name,
    people_last_name
from 
    peopleroles a
    inner join people b on (a.people_id=b.people_id)
    inner join roles c on (c.role_id=a.role_id)
where 
    a.role_id = 2
    ;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select 
    people_first_name,
    people_last_name,
    people_email
from 
    people a
    left join peopleskills b on (a.people_id=b.people_id)
where 
    b.skill_id is NULL
    ;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills


```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select 
    skill_name,
    skill_tag
from 
    skills a
    left join peopleskills b on (b.skill_id=a.skill_id)
where 
    peopleskills_ID is NULL
    ;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select
    people_first_name,
    people_last_name,
    skill_name
from
    peopleroles b
    inner join people a on (a.people_id=b.people_id)
    inner join roles c on (b.role_id=c.role_id)
    inner join peopleskills d on (b.people_id=d.people_id)
    inner join skills e on (d.skill_id=e.skill_id)
Where
    b.role_id = 5
    ;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select 
    a.role_id,
    a.role_name
from 
    roles a
    left join peopleroles b on (b.role_id=a.role_id)
Where
    a.role_id is NULL
    ;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

I would say this assignment was definitely more fun comapred to some of the other assignments. I personally enjoy joinning tables together and develope a way to get a particular data and learning more about sql select statements by experience. As of completetion of this assignment, I feel really satisfied and happy because I enjoy pulling data from the database that I kind of what to do some more. It feels also as if I was a kid again and completing my first ever puzzle. One could say I am somewhat "hook" on doing this. OVerall, it was a really enjoyab;e learning experience. 



